AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >-
  This template sets up the Amazon VPC, subnets, security groups, and IAM roles that 
  are necessary for launching a Kafka cluster in 3 AZs for HA. It creates an EC2
  instance that has Apache Kafka, Java, and the AWS CLI.
Parameters:
  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: "9"
    MaxLength: "18"
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    PublicOne:
      CIDR: 10.0.0.0/24
    PrivateOne:
      CIDR: 10.0.1.0/24
    PrivateTwo:
      CIDR: 10.0.2.0/24
    PrivateThree:
      CIDR: 10.0.3.0/24

Globals:
  Function:
    Timeout: 60
    MemorySize: 512

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock:
        !FindInMap ["SubnetConfig", "VPC", "CIDR"]
        # - SubnetConfig
        # - VPC
        # - CIDR
      Tags:
        - Key: Name
          Value: MSKVPC
  PublicSubnetOne:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: "AWS::Region"
      VpcId: !Ref VPC
      CidrBlock:
        !FindInMap ["SubnetConfig", "PublicOne", "CIDR"]
        # - SubnetConfig
        # - PublicOne
        # - CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: MSKPublicSubnet
  PrivateSubnetOne:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: "AWS::Region"
      VpcId: !Ref VPC
      CidrBlock:
        !FindInMap ["SubnetConfig", "PrivateOne", "CIDR"]
        # - SubnetConfig
        # - PrivateOne
        # - CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: MSKPrivateSubnetOne
  PrivateSubnetTwo:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: "AWS::Region"
      VpcId: !Ref VPC
      CidrBlock:
        !FindInMap ["SubnetConfig", "PrivateTwo", "CIDR"]
        # - SubnetConfig
        # - PrivateTwo
        # - CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: MSKPrivateSubnetTwo
  PrivateSubnetThree:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 2
        - !GetAZs
          Ref: "AWS::Region"
      VpcId: !Ref VPC
      CidrBlock:
        !FindInMap ["SubnetConfig", "PrivateThree", "CIDR"]
        # - SubnetConfig
        # - PrivateThree
        # - CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: MSKPrivateSubnetThree
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
  GatewayAttachement:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  NATEIP:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATEIP.AllocationId
      SubnetId: !Ref "PublicSubnetOne"
      Tags:
        - Key: "Name"
          Value: "MSKKafkaNATGateway"
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: MSKRouteTable
  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetOneRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: NATGateway
    Properties:
      RouteTableId: !Ref "PrivateRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref "NATGateway"
  PrivateSubnetOneRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetOne
  PrivateSubnetTwoRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetTwo
  PrivateSubnetThreeRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetThree
  KafkaClientInstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      Tags:
        - Key: Name
          Value:
            !Join [
              "-",
              [!Ref "AWS::StackName", "KafkaClientInstanceSecurityGroup"],
            ]
  MSKSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2181
          ToPort: 2181
          SourceSecurityGroupId: !GetAtt
            - KafkaClientInstanceSecurityGroup
            - GroupId
        - IpProtocol: tcp
          FromPort: 9094
          ToPort: 9094
          SourceSecurityGroupId: !GetAtt
            - KafkaClientInstanceSecurityGroup
            - GroupId
        - IpProtocol: tcp
          FromPort: 9092
          ToPort: 9092
          SourceSecurityGroupId: !GetAtt
            - KafkaClientInstanceSecurityGroup
            - GroupId
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName", "MSKSecurityGroup"]]
  MSKSecurityGroup9092:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: MSKSecurityGroup
    Properties:
      Description: Enable access to port 9092 inside the MSKSecurityGroup
      GroupId: !GetAtt MSKSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 9092
      ToPort: 9092
      SourceSecurityGroupId: !GetAtt MSKSecurityGroup.GroupId
  MSKSecurityGroup9094:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: MSKSecurityGroup
    Properties:
      Description: Enable access to port 9094 inside the MSKSecurityGroup
      GroupId: !GetAtt MSKSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 9094
      ToPort: 9094
      SourceSecurityGroupId: !GetAtt MSKSecurityGroup.GroupId
  EC2Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonMSKFullAccess"
        - "arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess"
  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: EC2MSKCFProfile
      Roles:
        - !Ref EC2Role
  KafkaClientEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: t2.small
      #   KeyName: !Ref KeyName
      IamInstanceProfile: !Ref EC2InstanceProfile
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: "AWS::Region"
      SubnetId: !Ref PublicSubnetOne
      SecurityGroupIds:
        - !GetAtt
          - KafkaClientInstanceSecurityGroup
          - GroupId
      ImageId: !Ref LatestAmiId
      #   ImageId: !FindInMap
      #     - RegionAMI
      #     - !Ref 'AWS::Region'
      #     - HVM64
      Tags:
        - Key: Name
          Value: KafkaClientInstance
      UserData: !Base64 >
        #!/bin/bash
        yum update -y 
        yum install python3.7 -y
        yum install java-1.8.0-openjdk-devel -y
        yum erase awscli -y
        cd /home/ec2-user
        echo "export PATH=.local/bin:$PATH" >> .bash_profile
        mkdir kafka
        mkdir mm
        cd kafka
        wget https://archive.apache.org/dist/kafka/2.2.1/kafka_2.12-2.2.1.tgz
        tar -xzf kafka_2.12-2.2.1.tgz
        cd /home/ec2-user
        wget https://bootstrap.pypa.io/get-pip.py
        su -c "python3.7 get-pip.py --user" -s /bin/sh ec2-user
        su -c "/home/ec2-user/.local/bin/pip3 install boto3 --user" -s /bin/sh
        ec2-user
        su -c "/home/ec2-user/.local/bin/pip3 install awscli --user" -s /bin/sh
        ec2-user
        chown -R ec2-user ./kafka
        chgrp -R ec2-user ./kafka
        chown -R ec2-user ./mm
        chgrp -R ec2-user ./mm
  MSKCluster:
    Type: "AWS::MSK::Cluster"
    Properties:
      BrokerNodeGroupInfo:
        ClientSubnets:
          - !Ref PrivateSubnetOne
          - !Ref PrivateSubnetTwo
          - !Ref PrivateSubnetThree
        InstanceType: kafka.m5.large
        SecurityGroups:
          - !GetAtt
            - MSKSecurityGroup
            - GroupId
        StorageInfo:
          EBSStorageInfo:
            VolumeSize: 2000
      ClusterName: MSKCluster
      EncryptionInfo:
        EncryptionInTransit:
          ClientBroker: TLS
          InCluster: true
      EnhancedMonitoring: PER_TOPIC_PER_BROKER
      KafkaVersion: 2.2.1
      NumberOfBrokerNodes: 3
Outputs:
  VPCId:
    Description: The ID of the VPC created
    Value: !Ref VPC
  PublicSubnetOne:
    Description: The name of the public subnet created
    Value: !Ref PublicSubnetOne
  PrivateSubnetOne:
    Description: The ID of private subnet one created
    Value: !Ref PrivateSubnetOne
  PrivateSubnetTwo:
    Description: The ID of private subnet two created
    Value: !Ref PrivateSubnetTwo
  PrivateSubnetThree:
    Description: The ID of private subnet three created
    Value: !Ref PrivateSubnetThree
  MSKSecurityGroupID:
    Description: The ID of the security group created for the MSK clusters
    Value: !GetAtt
      - MSKSecurityGroup
      - GroupId
  KafkaClientEC2InstancePublicDNS:
    Description: The Public DNS for the MirrorMaker EC2 instance
    Value: !GetAtt
      - KafkaClientEC2Instance
      - PublicDnsName
  MSKClusterArn:
    Description: The Arn for the MSKCluster
    Value: !Ref MSKCluster
    Export:
      Name: !Sub "${AWS::StackName}-ClusterArn" #Unique name
