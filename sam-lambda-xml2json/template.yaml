AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-lambda-xml2json

  Sample SAM Template for sam-lambda-xml2json

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 60

Parameters:
  ParamEnvironment:
    Type: String
    Description: Target environment (local,dev,stage, or prod)
    AllowedValues:
      - local
      - dev
      - stage
      - prod
    Default: local

  ParamCreateRedshift:
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
    Description: Whether to create Redshift cluster

  ParamRedshiftPassword:
    Description: Password for Redshift cluster
    Type: String
    NoEcho: "true"

Conditions:
  IsTargetAWS: !Not
    - !Equals
      - !Ref ParamEnvironment
      - "local"

  IsRedshift: !Equals
    - Ref: ParamCreateRedshift
    - "true"

  CreateRedshift: !And
    - !Condition IsTargetAWS
    - !Condition IsRedshift

Resources:
  xml2jsonFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: xml2json/
      Handler: app.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          ENVIRONMENT_CODE: !Ref ParamEnvironment
      Policies:
        - AWSLambdaExecute
        - AWSLambdaBasicExecutionRole
      Events:
        CreateJsonEvent:
          Type: S3
          Properties:
            Bucket: !Ref xml2jsonBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: xml

  xml2jsonBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub ${AWS::StackName}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: true

  xml2jsonBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref xml2jsonBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Sid: ReadAccess
            Effect: Allow
            Principal: "*"
            Resource:
              - !Sub arn:aws:s3:::${xml2jsonBucket}/*
          - Action:
              - s3:PutObject
            Sid: WriteAccess
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt xml2jsonFunctionRole.Arn
            Resource:
              - !Sub arn:aws:s3:::${xml2jsonBucket}/*

  RedshiftCluster:
    Type: AWS::Redshift::Cluster
    Condition: CreateRedshift
    Properties:
      ClusterType: single-node
      NodeType: dc2.large
      DBName: dev
      MasterUsername: awsuser
      MasterUserPassword: !Ref ParamRedshiftPassword
      PubliclyAccessible: false
      VpcSecurityGroupIds:
        - !GetAtt RedshiftSecurityGroup.GroupId
      Port: 5439
      IamRoles:
        - !GetAtt RedshiftRole.Arn

  RedshiftRole:
    Type: AWS::IAM::Role
    Condition: CreateRedshift
    Properties:
      RoleName: !Sub ${AWS::StackName}-redshift
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: redshift.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-redshift
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource: "*"

  RedshiftSecurityGroup:
    Condition: CreateRedshift
    Properties:
      GroupDescription: Security group for Redshift
      SecurityGroupIngress:
        - FromPort: 5439
          ToPort: 5439
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
    Type: AWS::EC2::SecurityGroup

Outputs:
  xml2jsonFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt xml2jsonFunction.Arn

  xml2jsonFunctionRole:
    Description: "Lambda Function Role ARN"
    Value: !GetAtt xml2jsonFunctionRole.Arn

  xml2jsonBucket:
    Description: "S3 bucket for uploads"
    Value: !Ref "xml2jsonBucket"

  xml2jsonBucketPolicy:
    Description: "S3 bucket policy"
    Value: !Ref "xml2jsonBucketPolicy"

  RedshiftAddress:
    Description: "Redshift Endpoint"
    Value:
      !If [
        CreateRedshift,
        !GetAtt RedshiftCluster.Endpoint.Address,
        "No Redshift cluster created",
      ]

  RedshiftPort:
    Description: "Redshift Port"
    Value:
      !If [
        CreateRedshift,
        !GetAtt RedshiftCluster.Endpoint.Port,
        "No Redshift cluster created",
      ]

  RedshiftRole:
    Description: "Redshift Role"
    Value:
      !If [
        CreateRedshift,
        !GetAtt RedshiftRole.Arn,
        "No Redshift cluster created",
      ]
